using System;
using InstrumentDriver.Core;
using InstrumentDriver.Core.Register;
using InstrumentDriver.Core.Interfaces;
using InstrumentDriver.Core.Utility;

namespace InstrumentDriver.NewInstrument
{

	// DO NOT EDIT THIS FILE.
	// This file was generated on 2020/1/19 20:48:26 from C:\TEMP\M9410ReceiverRegDefs.xlsx
	// by D:\Programs\MyRegisterFileTool\RegisterFileTool\bin\Debug\MyRegisterFileTool.exe version 1.5.5.0


	#region RegisterSets
	public class ReceiverRegisterSet : AbstractRegisterSet
	{

		#region Base Address(es) / Group Offset(s)

		// These are the base addresses (group offsets) defined by the register spreadsheet.
		// The client code will normally instantiate an instance of the register set for each.
		[System.Reflection.Obfuscation( Exclude = true )]
		public enum BaseAddress
		{
			Receiver0 = 0x0,
		}

		#endregion Base Address(es)

		#region  Register enums

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum ReceiverRegister
		{
			SoftwareFpgaReset, // 0x0000 Sets 1 to set FPGA to default configuration
			RfStatus, // 0x0004 Bits to be determined
			FpgaVersion, // 0x0008 Reversion
			Reserved, // 0x000c old register for Power Control, removed on P2
			RfControl1, // 0x0010 ATT1
			RfControl2, // 0x0014 I- output SW(U51)
			RfControl3, // 0x0018 Active-low Asynchronous Clear Input.
		}

		/// <summary>
		/// Register offset from original register definition (excludes 'Base').
		/// </summary>
		/// <remarks>
		/// The actual/runtime register offset is affected by parameters passed to the
		/// register factory and may not match the values defined here.
		/// </remarks>
		[System.Reflection.Obfuscation( Exclude = true )]
		public enum ReceiverRegisterOffsets
		{
			SoftwareFpgaReset = 0x0000, // Sets 1 to set FPGA to default configuration
			RfStatus = 0x0004, // Bits to be determined
			FpgaVersion = 0x0008, // Reversion
			Reserved = 0x000c, // old register for Power Control, removed on P2
			RfControl1 = 0x0010, // ATT1
			RfControl2 = 0x0014, // I- output SW(U51)
			RfControl3 = 0x0018, // Active-low Asynchronous Clear Input.
		}

		#endregion  Register enums

		#region  Register bitfield enums

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum SoftwareFpgaResetBF
		{
			Reset,               // Bit   0 		 Sets 1 to set FPGA to default configuration
		}

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum RfStatusBF
		{
			Value
		}

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum FpgaVersionBF
		{
			Rev,                 // Bits  0- 7 		 Reversion
			Minor,               // Bits  8-15 		 Minor Version
			Major,               // Bits 16-24 		 Major Version
			BoardID,             // Bits 29-31 		 Board identify code
		}

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum ReservedBF
		{
			Value
		}

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum RfControl1BF
		{
			Att1,                // Bits  0- 4 		 ATT1
			PreSelectU28,        // Bits  5- 6 		 Pre filter select (U28)
			RxInputU1,           // Bit   7 		 Rx input SW select (U1 and U2)
			PreSelectU22,        // Bits  8- 9 		 Pre filter select (U22)
			PreSelectU42,        // Bits 10-11 		 Pre filter select (U42)
			PreSelectU21,        // Bits 12-13 		 Pre filter select (U21)
			PreSelectU43,        // Bits 14-15 		 Pre filter select (U43)
			PreSelectU43U21U42U22, // Bits  8-15 		 Combined BF for U43 U21 U42 U22
			PreAmpU29,           // Bits 16-17 		 Pre_amp select(U29)
			PreSelectU26,        // Bits 18-19 		 Pre filter select(U26)
			PreSelectU23,        // Bits 20-21 		 Pre filter select (U23)
			PreSelectU24,        // Bits 22-23 		 Pre filter select (U24)
			PreSelectU24U23U26,  // Bits 18-23 		 Combined BF for U24 U23 U26
			Loopback,            // Bit  24 		 loopback input SW U2
			PowerNeg123,         // Bit  25 		 Control the -12.3V power supply
			PowerPos123,         // Bit  26 		 Control the +12.3V power supply
		}

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum RfControl2BF
		{
			IOutNeg,             // Bit   0 		 I- output SW(U51)
			IOutPos,             // Bit   1 		 I+ output SW(U50)
			Iout,                // Bits  0- 1 		 I Output
			AbusSel,             // Bits  2- 5 		 Abus select
			QOutPos,             // Bit   6 		 Q+ output SW(U53)
			QOutNeg,             // Bit   7 		 Q- output SW(U52)
			Qout,                // Bits  6- 7 		 Q Output
			HiBandFilter,        // Bit   8 		 Hi band HPF select(U3)
			Att3,                // Bits  9-13 		 ATT3
			PreAmpU30,           // Bits 14-15 		 Pre_amp select(U30)
			HiBandAmp,           // Bit  16 		 Hi band amp select(U5 and U6)
			Att2,                // Bits 17-21 		 ATT2
			LowBandSW,           // Bit  22 		 Low band isolation SW(U7)
			BandSelect,          // Bit  23 		 HI or Low band select (U4)
			LowBandSelect,       // Bits 22-23 		 Low band selection and isolation U4 U7
			LoSel1,              // Bit  24 		 Control for LO Path selection (U88)
			LoSel2,              // Bit  25 		 Control for LO Path selection (U87)
			LoSel,               // Bits 24-25 		 Control for LO Path selection(U87U88)
		}

		[System.Reflection.Obfuscation( Exclude = true )]
		public enum RfControl3BF
		{
			DacClear,            // Bit   2 		 Active-low Asynchronous Clear Input.
			DacUpdatePin,        // Bit   3 		 Active-low Asynchronous DAC Update Pin.
			DacTogglePin,        // Bit   4 		 Asynchronous Toggle Pin:A falling edge updates the DAC register with data from input register A. A rising edge updates the DAC register with data from input register B.
			DemodSW,             // Bit   5 		 RF channel select: 1: enable select RFA&RFB channel 0: fixed to RFB channel.
			N4vShdnN1v6,         // Bit   8 		 -1.6V LDO output control(U64)
			P6vEnP3v3,           // Bit   9 		 3.3V LDO output control(U73)
			N4vShdnN3v3,         // Bit  10 		 -3.3V LDO output control(U63)
			P6vEnP5,             // Bit  11 		 5V LDO output control(U68)
			N15vShdn,            // Bit  12 		 -12.3V LDO output control(U65)
			P15vEn,              // Bit  13 		 +12.3V LDO output control(U81)
		}

		#endregion  Register bitfield enums

		#region Member Variables

		private static readonly RegDef[] mRegisterDefinitions = new[]
			{
				new RegDef((int) ReceiverRegister.SoftwareFpgaReset, 0x0000, typeof(SoftwareFpgaResetBF), RegType.WO ),
				new RegDef((int) ReceiverRegister.RfStatus, 0x0004, typeof(RfStatusBF), RegType.RO ),
				new RegDef((int) ReceiverRegister.FpgaVersion, 0x0008, typeof(FpgaVersionBF), RegType.RO ),
				new RegDef((int) ReceiverRegister.Reserved, 0x000c, typeof(ReservedBF), RegType.RO ),
				new RegDef((int) ReceiverRegister.RfControl1, 0x0010, typeof(RfControl1BF), RegType.RW ),
				new RegDef((int) ReceiverRegister.RfControl2, 0x0014, typeof(RfControl2BF), RegType.RW ),
				new RegDef((int) ReceiverRegister.RfControl3, 0x0018, typeof(RfControl3BF), RegType.RW ),
			};

		private static readonly BitFieldDef[] mBitFieldDefinitions = new []
			{
				new BitFieldDef( (int)ReceiverRegister.SoftwareFpgaReset, (int)SoftwareFpgaResetBF.Reset, 0 ),
				new BitFieldDef( (int)ReceiverRegister.RfStatus, (int)RfStatusBF.Value, 0, 31 ),
				new BitFieldDef( (int)ReceiverRegister.FpgaVersion, (int)FpgaVersionBF.Rev, 0, 7 ),
				new BitFieldDef( (int)ReceiverRegister.FpgaVersion, (int)FpgaVersionBF.Minor, 8, 15 ),
				new BitFieldDef( (int)ReceiverRegister.FpgaVersion, (int)FpgaVersionBF.Major, 16, 24 ),
				new BitFieldDef( (int)ReceiverRegister.FpgaVersion, (int)FpgaVersionBF.BoardID, 29, 31 ),
				new BitFieldDef( (int)ReceiverRegister.Reserved, (int)ReservedBF.Value, 0, 31 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.Att1, 0, 4 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU28, 5, 6 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.RxInputU1, 7 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU22, 8, 9 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU42, 10, 11 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU21, 12, 13 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU43, 14, 15 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU43U21U42U22, 8, 15 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreAmpU29, 16, 17 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU26, 18, 19 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU23, 20, 21 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU24, 22, 23 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PreSelectU24U23U26, 18, 23 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.Loopback, 24 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PowerNeg123, 25 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl1, (int)RfControl1BF.PowerPos123, 26 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.IOutNeg, 0 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.IOutPos, 1 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.Iout, 0, 1 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.AbusSel, 2, 5 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.QOutPos, 6 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.QOutNeg, 7 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.Qout, 6, 7 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.HiBandFilter, 8 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.Att3, 9, 13 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.PreAmpU30, 14, 15 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.HiBandAmp, 16 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.Att2, 17, 21 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.LowBandSW, 22 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.BandSelect, 23 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.LowBandSelect, 22, 23 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.LoSel1, 24 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.LoSel2, 25 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl2, (int)RfControl2BF.LoSel, 24, 25 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.DacClear, 2 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.DacUpdatePin, 3 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.DacTogglePin, 4 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.DemodSW, 5 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.N4vShdnN1v6, 8 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.P6vEnP3v3, 9 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.N4vShdnN3v3, 10 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.P6vEnP5, 11 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.N15vShdn, 12 ),
				new BitFieldDef( (int)ReceiverRegister.RfControl3, (int)RfControl3BF.P15vEn, 13 ),
			};

		#endregion Member Variables

		#region Register Accessors
		public Reg32T<SoftwareFpgaResetBF> SoftwareFpgaReset
		{
			get;
			private set;
		}
		public Reg32T<RfStatusBF> RfStatus
		{
			get;
			private set;
		}
		public Reg32T<FpgaVersionBF> FpgaVersion
		{
			get;
			private set;
		}
		public Reg32T<ReservedBF> Reserved
		{
			get;
			private set;
		}
		public Reg32T<RfControl1BF> RfControl1
		{
			get;
			private set;
		}
		public Reg32T<RfControl2BF> RfControl2
		{
			get;
			private set;
		}
		public Reg32T<RfControl3BF> RfControl3
		{
			get;
			private set;
		}
		#endregion Register Accessors

		/// <summary>
		/// Creates the device register set (typed registers). Uses the 'default' BAR
		/// (which is normally specified in the register spreadsheet).
		/// </summary>
		/// <param name="manager">the IRegManager instance to add this RegisterSet to</param>
		/// <param name="instrument">the IInstrument instance these registers are for</param>
		/// <param name="groupName">the group name used to access this RegisterSet from IRegManager</param>
		public ReceiverRegisterSet( IRegManager manager, IInstrument module, string groupName )
			: this( manager, module, groupName, (int)BaseAddress.Receiver0, /*barIndex=*/0 )
		{
		}
		/// <summary>
		/// Creates the device register set (typed registers). Uses the 'default' BAR
		/// (which is normally specified in the register spreadsheet).
		/// </summary>
		/// <param name="manager">the IRegManager instance to add this RegisterSet to</param>
		/// <param name="instrument">the IInstrument instance these registers are for</param>
		/// <param name="groupName">the group name used to access this RegisterSet from IRegManager</param>
		/// <param name="registerSetOffset">an offset added to all register offsets</param>
		public ReceiverRegisterSet( IRegManager manager, IInstrument module, string groupName, int registerSetOffset )
			: this( manager, module, groupName, registerSetOffset, /*barIndex=*/0 )
		{
		}
		/// <summary>
		/// Creates the device register set (typed registers).
		/// Note that the BAR and offset can be specified by the caller so the same RegisterSet
		/// class can be used to define multiple unique RegisterSet instances (different offset
		/// and or BAR).
		/// </summary>
		/// <param name="manager">the IRegManager instance to add this RegisterSet to</param>
		/// <param name="instrument">the IInstrument instance these registers are for</param>
		/// <param name="groupName">the group name used to access this RegisterSet from IRegManager</param>
		/// <param name="registerSetOffset">an offset added to all register offsets</param>
		/// <param name="barIndex">the BAR to use</param>
		public ReceiverRegisterSet( IRegManager manager, IInstrument module, string groupName, int registerSetOffset, int barIndex )
		{
			// Create the factory
			RegFactory regFactory = new RegFactory( registerSetOffset, module, Reg32.ConstructReg );

			// Determine which IRegDriver (determines default BAR)
			IRegDriver regDriver = ( barIndex >= module.RegDrivers.Length ) ? null : module.RegDrivers[ barIndex ];
			if( regDriver == null )
			{
				throw new InternalApplicationException( "ReceiverRegisterSet requires RegDriver for BAR" + barIndex );
			}

			// Create the register definitions 
			Registers = regFactory.CreateRegArray(
				mRegisterDefinitions,
				typeof( ReceiverRegister ),
				regDriver,
				module.Name );

			regFactory.CreateBitFields( mBitFieldDefinitions, Registers, module.Name, string.Empty );

			if( manager != null )
			{
				// Adding as a group creates an IDirtyBit and attaches to each register
				manager.AddGroup( groupName, this );
			}
			SoftwareFpgaReset = new Reg32T<SoftwareFpgaResetBF>((Reg32)Registers[ (Int32)ReceiverRegister.SoftwareFpgaReset ]);
			RfStatus = new Reg32T<RfStatusBF>((Reg32)Registers[ (Int32)ReceiverRegister.RfStatus ]);
			FpgaVersion = new Reg32T<FpgaVersionBF>((Reg32)Registers[ (Int32)ReceiverRegister.FpgaVersion ]);
			Reserved = new Reg32T<ReservedBF>((Reg32)Registers[ (Int32)ReceiverRegister.Reserved ]);
			RfControl1 = new Reg32T<RfControl1BF>((Reg32)Registers[ (Int32)ReceiverRegister.RfControl1 ]);
			RfControl2 = new Reg32T<RfControl2BF>((Reg32)Registers[ (Int32)ReceiverRegister.RfControl2 ]);
			RfControl3 = new Reg32T<RfControl3BF>((Reg32)Registers[ (Int32)ReceiverRegister.RfControl3 ]);
		}

		/// <summary>
		/// Sets the initial values for the registers. Does not apply the values (write to HW).
		/// </summary>
		public override void SetInitialValues()
		{
			SoftwareFpgaReset.Value = 0;
			RfControl1.Value = 1;
			RfControl2.Value = 1;
			RfControl3.Value = 1;
		}
	}

	#endregion RegisterSets
}
